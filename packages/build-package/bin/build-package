#!/usr/bin/env bash

case "$PACKAGE_NPM_CLIENT" in
  "yarn")
    PACKAGE_INSTALL_PROD="yarn --silent install --prod"
    PACKAGE_INSTALL_PROD_CUSTOM="yarn --silent build-install-prod"
    PACKAGE_INSTALL="yarn --silent install"
    PACKAGE_INSTALL_CUSTOM="yarn --silent build-install"
    ;;
  "npm")
    PACKAGE_INSTALL_PROD="npm install --production"
    PACKAGE_INSTALL_PROD_CUSTOM="npm run build-install-prod"
    PACKAGE_INSTALL="npm install"
    PACKAGE_INSTALL_CUSTOM="npm run build-install"
    ;;
  *)
    PACKAGE_INSTALL_PROD="yarn --silent install --prod"
    PACKAGE_INSTALL_PROD_CUSTOM="yarn --silent build-install-prod"
    PACKAGE_INSTALL="yarn --silent install"
    PACKAGE_INSTALL_CUSTOM="yarn --silent build-install"
    ;;
esac
mkdir -p build
rm -f "build/package.zip"
rm -rf node_modules
case "$PACKAGE_TARGET" in
  "lambda")
    npm_config_arch=x64 npm_config_platform=linux $PACKAGE_INSTALL_PROD >/dev/null || exit 2
    ;;
  "custom")
    $PACKAGE_INSTALL_PROD_CUSTOM >/dev/null || exit 2
    ;;
  *)
    $PACKAGE_INSTALL_PROD >/dev/null || exit 2
    ;;
esac
zip -r -X "build/package-temp.zip" . -x@package-excludes.lst >/dev/null || exit 3

if [ -f "build/package.zip" ]; then
  unzip build/package.zip -d build/package-old-unzipped >/dev/null
  unzip build/package-temp.zip -d build/package-new-unzipped >/dev/null
  diff -r build/package-old-unzipped build/package-new-unzipped >/dev/null
  r=$?
  rm -rf build/package-old-unzipped build/package-new-unzipped
  if [ "0" != "$r" ]; then
    rm -f build/package.zip
    mv build/package-temp.zip build/package.zip
  else
    rm -f build/package-temp.zip
  fi
else
  mv build/package-temp.zip build/package.zip
fi

case "$PACKAGE_TARGET" in
  "custom")
    $PACKAGE_INSTALL_CUSTOM >/dev/null || exit 4
    ;;
  *)
    $PACKAGE_INSTALL >/dev/null || exit 4
    ;;
esac
